import sys

def convect_ascii(str) :
    i = 0
    tmp = []
    while i < len(str) :
        tmp.append(ord(str[i]))
        i = i + 1
    return tmp

def little_matrice(key) :
    max = 0
    while (max * max) <= len(key) :
        max = max + 1
    return max;

def display_key_matrice(key, nb_matrice) :
    nb = len(key)
    i = 0
    save = nb_matrice
    for x in range(0,nb) :
        if x == nb_matrice - 1 :
            nb_matrice = (nb_matrice + save)
            i = i + 1
    while x < nb_matrice - 1 :
        x = x + 1
        key.append(0)
    x = 0
    while (i != save - 1) :
        while x < save :
            key.append(0)
            x = x + 1
        i = i + 1
    i = 0
    nb_matrice = save
    nb = len(key)
    for x in range(0,nb) :
        print(key[x], end="  ")
        if i == nb_matrice - 1 :
            print("\n")
            nb_matrice = (nb_matrice + save)
        i = i + 1

def calcul_matrix(message, nb_matrice, tmp_matrice, key) :
    tmp_key = []
    tmp_message = []
    tmp = []
    x = 0
    y = 0
    v = 0
    b = 0
    u = 0
    while (y) < len(message) :
        if x == 2 :
            x = 0
        while x != nb_matrice * nb_matrice:
            tmp_key.append(key[x])
            x = x + nb_matrice
        u = 0
        while u < nb_matrice :
            tmp_message.append(message[u])
            u = u + 1
        tmp.append(0)
        v = 0
        while v < nb_matrice :
            a = tmp_key[b] * tmp_message[b]
            tmp[y] = tmp[y] + a
            v = v + 1
            b = b + 1
        y = y + 1
        x = x - (nb_matrice * nb_matrice - 1)
        x = x + 1
    print(tmp)

def erreur() :
    if (len(sys.argv) == 2) :
        if (sys.argv[1][0] == "-" and sys.argv[1][1] == "h") :
            print()
            print("USAGE")
            print("   ./103cipher message key flag")
            print()
            print("DESCRIPTION")
            print("   message   a message, made of ASCII characters")
            print("   key       the encryption key, made of ASCII characters")
            print("   flag      0 for the message to be encrypted, 1 to be decrypted")
            exit(0)
    if (len(sys.argv) < 4 or len(sys.argv) > 4) :
        print("less argument")
        exit(84)
    if (sys.argv[3][0] != "0" and sys.argv[3][0] != "1") :
        print("less")
        exit(84)

def main() :
    erreur()
    str1 = sys.argv[1];
    str2 = sys.argv[2];
    message = []
    key = []
    tmp_matrice = []
    nb_key = 3
    nb_message = 3
    nb_matrice = 0
    key = convect_ascii(str2)
    message = convect_ascii(str1)
    nb_matrice = little_matrice(key)
    print("Key matrix:")
    display_key_matrice(key, nb_matrice)
    print("Encrypted message:")
    calcul_matrix(message, nb_matrice, tmp_matrice, key)

main()
